// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String
  role      Role      @default(USER)
  projects  Project[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Project {
  id          String   @id @default(cuid())
  name        String
  geminiApiKey String
  geminiModel String   @default("gemini-2.5-flash")
  temperature Float    @default(0.7)
  type        ProjectType @default(SINGLE)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompts     Prompt[]
  chats       Chat[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Prompt {
  id          String  @id @default(cuid())
  name        String
  instruction String  @db.Text
  projectId   String
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
}

enum ProjectType {
  SINGLE   // одноразовые промпты (текущее поведение)
  CHAT     // проекты с историей переписки
}

model Chat {
  id            String   @id @default(cuid())
  name          String?
  style         String?  @db.Text // стиль/персона чата (шутливый, секретничает и т.п.)
  summary       String?  @db.Text // сжатая сводка истории для экономии контекста
  lastClearedAt DateTime? // отметка последней очистки (для ежедневного сброса)
  externalKey   String?   // внешний идентификатор (телефон/логин) для авто-сопоставления чата
  projectId     String
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  messages      Message[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([projectId, externalKey])
  @@index([projectId])
}

model Message {
  id        String      @id @default(cuid())
  chatId    String
  chat      Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  role      MessageRole
  content   String      @db.Text
  createdAt DateTime    @default(now())

  @@index([chatId])
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}
